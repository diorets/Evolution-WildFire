#ifndef GENES_H_INCLUDED
#define GENES_H_INCLUDED


gene* infoGene(int a, int b, int c, int d) {
    gene * nodee = (gene*) malloc(sizeof(gene));
    if (nodee == 0) exit(-3);

    nodee->start = 'i';

    nodee->iData[nod] = a;
    nodee->iData[bon] = b;
    nodee->iData[mus] = c;
    nodee->iData[ner] = d;

    nodee->iData[tot] = a + b + c + d + 1/*for info node*/;
    nodee->endof = '\0';
    nodee->next = NULL;
    return nodee;
}

gene* boneGene(int numNodes) {
    gene * nodee = (gene*) malloc(sizeof(gene));
    if (nodee == 0) exit(-3);
    nodee->start = 'b';

    do {
        nodee->iData[0] = rand() % numNodes;
        nodee->iData[1] = rand() % numNodes;
    } while (nodee->iData[0] == nodee->iData[1] && numNodes > 2);
nodee->next = NULL;
    nodee->endof = '\0';
    return nodee;
}

bool invalidCon(int * connections, gene * genome) {

    int numNodes = genome[inf].iData[nod];
    int numGenes = genome[inf].iData[tot];

    if (numNodes < 2) return false;
    if (connections[0] == connections[1]) return true;

    for (int i = 1; i < numGenes; i++) {
        if (genome[i].start == 'n') continue;
        if ((genome[i].iData[0] == connections[0]) || (genome[i].iData[0] == connections[1])) {
            if ((genome[i].iData[1] == connections[0]) || (genome[i].iData[1] == connections[1])) {
                return true;
            }
        }
    }
    return false;
}

gene* addMuscle(int numNodes, int a) {
    gene * nodee = (gene*) malloc(sizeof(gene));
    nodee->start = 'm';

    nodee->iData[0] = numNodes - 1;
    nodee->iData[1] = a;
    nodee->endof = '\0';
    nodee->next = NULL;
    return nodee;
}

gene* muscleGene(int a, int b) {

    gene * nodee = (gene*) malloc(sizeof(gene));
    nodee->start = 'm';

    nodee->iData[0] = a;
    nodee->iData[1] = b;

    nodee->endof = '\0';
    nodee->next = NULL;
    return nodee;
}

conn goodConnection(gene * head, int a, int b, int numNodes) {
    bool tryAgain = false;
    conn validCon;

    do {
        gene * current = head;
        tryAgain = false;
        /* Go through every node */
        while (current != NULL) {
            if (current->start == 'm') {
                /* If this connection exist */
                if ((current->iData[0] == a && current->iData[1] == b) ||
                    (current->iData[1] == a && current->iData[0] == b) ){
                    /* Try a new connection */
                    a = rand() % numNodes;
                    b = rand() % numNodes;
                    /* And check if this works */
                    tryAgain = true;
                }
            }
            current = current->next;
        }
        if (a == b) {
            a = rand() % numNodes;
            b = rand() % numNodes;
            tryAgain = true;
        }
    } while (tryAgain);

    validCon.a = a;
    validCon.b = b;
    return validCon;
}

gene* muscleGene(gene * genome) {

    gene * nodee = (gene*) malloc(sizeof(gene));
    if (nodee == 0) exit(-3);

    int numNodes = genome->iData[nod];
    nodee->start = 'm';

    int a = nodee->iData[0] = rand() % numNodes;
    int b = nodee->iData[1] = rand() % numNodes;

    conn valid = goodConnection(genome, a, b, numNodes);
    nodee->iData[0] = valid.a;
    nodee->iData[1] = valid.b;

    nodee->next = NULL;
    nodee->endof = '\0';
    return nodee;
}

gene * nodeGene(posi loc) {
    gene * nod = (gene*) malloc(sizeof(gene));
    if (nod == 0) exit(-3);
    nod->start = 'n';

    int cageSize = 10;
    nod->fData[xposi] = loc.x;
    nod->fData[yposi] = loc.y;
    nod->fData[zposi] = loc.z;
    nod->fData[mass] = 1.0;
    nod->fData[fric] = 0.6;

    nod->endof = '\0';
    nod->next = NULL;
    return nod;
}

gene * nodeGene() {
    gene * nod = (gene*) malloc(sizeof(gene));
    if (nod == 0) exit(-3);
    nod->start = 'n';

    int cageSize = 10;
    nod->fData[xposi] = 0;//(rand() % cageSize) - cageSize / 2;
    nod->fData[yposi] = (rand() % cageSize) - cageSize / 2;
    nod->fData[zposi] = (rand() % cageSize) + 3;
    nod->fData[mass] = 1.0;
    nod->fData[fric] = 0.6;

    nod->endof = '\0';
    nod->next = NULL;
    return nod;
}

posi goodPosition(gene * head, int x, int y, int z, int cageSize) {
    bool tryAgain = false;
    posi validPos;
    do {
        gene * current = head;
        tryAgain = false;
        /* Go through every node */
        while (current != NULL) {
            if (current->start == 'n') {
                /* If it is in the same location as another */
                if (fabs(x - current->fData[xposi]) < 0.75 &&
                    fabs(y - current->fData[yposi]) < 0.75 &&
                    fabs(z - current->fData[zposi]) < 0.75 ){
                    /* Try a new location */
                    x = 0;//(rand() % cageSize) - cageSize / 2;
                    y = (rand() % cageSize) - cageSize / 2;
                    z = (rand() % cageSize) + 3;
                    /* And check if this works */
                    tryAgain = true;
                }
            }
            current = current->next;
        }
    } while (tryAgain);

    validPos.x = x;
    validPos.y = y;
    validPos.z = z;
    return validPos;
}

gene * nodeGene(gene * head) {
    gene * nod = (gene*) malloc(sizeof(gene));
    if (nod == 0) exit(-3);
    nod->start = 'n';

    int cageSize = 10;

    float x = nod->fData[xposi] = 0;//(rand() % cageSize) - cageSize / 2;
    float y = nod->fData[yposi] = (rand() % cageSize) - cageSize / 2;
    float z = nod->fData[zposi] = (rand() % cageSize) + 3;
    posi valid = goodPosition(head, x, y, z, cageSize);
    nod->fData[xposi] = valid.x;
    nod->fData[yposi] = valid.y;
    nod->fData[zposi] = valid.z;

    nod->fData[mass] = 1.0;
    nod->fData[fric] = 0.6;


    nod->endof = '\0';
    nod->next = NULL;
    return nod;
}


#endif // GENES_H_INCLUDED
