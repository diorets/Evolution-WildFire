#include "global.h"
#include "color.h"
#include <stdio.h>
#include "physics.h"
#include "Math/myMath.h"
#include "Generation/duplicate.h"
#include "Generation/generation.h"
#include "Generation/mutations.h"
#include "Generation/genes.h"
#include "Visual/drawBasic.h"
#include "GameModes/Simulate/all.h"
#include <math.h>
#include <stdlib.h>
#include "Glut/basic.h"
#include "Glut/myGlut.h"

#define MAX_TIME 9000
#define FRAME_SLEEP 10

void simulationMode() {
    static bool firstCall = true;
    if (firstCall) {
        srand(9);
        readyCreature();
        firstCall = false;
    }

//    if (!globalData) globalData = (void*) malloc(sizeof(void) * 1)
    if (!simulate())         newCreature(true); // Error
    if (display)             draw();
    if (simTime == MAX_TIME) newCreature(false);
    if (id      == genSize)  newGeneration();
    return;
}


void lowerCreature() { // This can be made faster (find lowest, calc dis, sub all)
    bool rightPlace = false;
    int len = specimen[id].genome->iData[nod];
    while (true) {
        for (int i = 0; i < len; i++) {
            specimen[id].nodes[i].loc.z -= 0.01;
            if (specimen[id].nodes[i].loc.z <= 0.75 + 0.1) {
                rightPlace = true;
            }
        }
        if (rightPlace) break;
    }
    return;
}

void readyCreature() {
	if (simTime == 0) {
        lowerCreature();
	}
	return;
}

bool simulate() {
    if (updateCreature(&specimen[id], simTime)) return false; // Error
    if (simTime == (int)(MAX_TIME * 0.5)) {// Give a few seconds to fall over
        specimen[id].origin = getCom(specimen[id]);
    }
    simTime++;
    return true;
}

#ifdef WIN32
#include <windows.h>
#elif _POSIX_C_SOURCE >= 199309L
#include <time.h>   // for nanosleep
#else
#include <unistd.h> // for usleep
#endif

void sleep_ms(int milliseconds) {// cross-platform sleep function
#ifdef WIN32
    Sleep(milliseconds);
#elif _POSIX_C_SOURCE >= 199309L
    struct timespec ts;
    ts.tv_sec = milliseconds / 1000;
    ts.tv_nsec = (milliseconds % 1000) * 1000000;
    nanosleep(&ts, NULL);
#else
    usleep(milliseconds * 1000);
#endif
}

void traceLines(double * entries, double maxNum, int numEntriesI, double r, double g, double b){
    glColor3f(r, g, b);
    glBegin(GL_LINES);
    double numEntries = (double) numEntriesI;
    for (int i = 0; i < numEntries; i++) {
        double x = (i + 0) / numEntries;
        double X = (i + 1) / numEntries;
        double y = 5 * (entries[i + 0]);
        double Y = 5 * (entries[i + 1]);
        glVertex2f(WINDOW_X * x, 0.1 * WINDOW_Y * (-0.2*y/maxNum + 9));
        glVertex2f(WINDOW_X * X, 0.1 * WINDOW_Y * (-0.2*Y/maxNum + 9));
    }
    glEnd();
    return;
}

void drawDisGraph() {
    /* Initialize */
    static int num = 0; num++;
    static double *dis = NULL;
    static double *vel = NULL;
    static double *acc = NULL;
    static double maxDis = 0.0;
    static double maxVel = 0.0;
    static double maxAcc = 0.0;

    /* Initial Memory Allocation */
    if(!dis) dis = (double*) malloc(sizeof(double)); // When Do I free?
    if(!vel) vel = (double*) malloc(sizeof(double));
    if(!acc) acc = (double*) malloc(sizeof(double));
    if (!dis||!vel||!acc) exit(21532);

    /* Reallocating for New Data */
    dis = (double*) realloc(dis, sizeof(double) * (num + 10));
    vel = (double*) realloc(vel, sizeof(double) * (num + 10));
    acc = (double*) realloc(acc, sizeof(double) * (num + 10));
    if (!dis||!vel||!acc) exit(21532);

    /* Get Averages per Node */
    dis[num] = euc2D(       getCom(specimen[id]), specimen[id].origin);
    vel[num] = euc2D(getAvgNodeVel(specimen[id]), specimen[id].origin);
    acc[num] = euc2D(getAvgNodeVel(specimen[id]), specimen[id].origin); // Fix ME

    /* Get Maximums (for scaling) */
    if (fabs(dis[num]) > maxDis) maxDis = fabs(dis[num]);
    if (fabs(vel[num]) > maxVel) maxVel = fabs(vel[num]);
    if (fabs(acc[num]) > maxAcc) maxAcc = fabs(acc[num]);

    /** Drawing **/
        /* Draw Background */
        glColor3f(BLACK);
            drawSquare(WINDOW_SIZE, 0, WINDOW_Y * 0.8); // Height is Window_y * 0.2
        glColor3f(WHITE);

        /* Zero Line */
        glBegin(GL_LINES);
            glVertex2f(0,        0.9 * WINDOW_Y);
            glVertex2f(WINDOW_X, 0.9 * WINDOW_Y);
        glEnd();

        /* Draw Data */
        traceLines(dis, maxDis, num, WHITE);
        traceLines(vel, maxVel, num, BLUE);
    //    traceLines(acc, maxAcc, num, GREEN);

        /* Measures */
        glColor3f(WHITE);
        char str[20];
        int numDiv = 8;
        for (int i = 0; i <= numDiv; i++) {
            sprintf(str, "%d(%d%%)", simTime * i / numDiv, 100 *  i / numDiv);
            drawText(str, 0.95 * WINDOW_X * i / numDiv, WINDOW_Y * 0.92);
        }
        sprintf(str, "%0.2f-", maxDis);
        drawText(str, 0.5, WINDOW_Y * 0.815);
    return;
}

void drawStats() {
    char str[20];
    glColor3f(BLACK);
    /* General Stats */
    sprintf(str, "Generation:  %d", gen);
    drawText(str, 5, 7);
    sprintf(str, "Specimen ID: %d", id);
    drawText(str, 5, 14);
    sprintf(str, "Time: %d / %d (%.2f%%)", simTime, MAX_TIME, 100 * simTime / (double) MAX_TIME);
    drawText(str, 5, 21);
    sprintf(str, "Playback Speed: %dx", playBackSpeed);
    drawText(str, 5, 28);
    drawText("WASD, EQ(z) & Arrows, ESC (exit), F (fullscreen), SPACE to skip, i (breaks if you pressed space at some point),o,l,p || Below is a distance/time graphs", 5, 35);

    /* Explanation */
    drawText("If you want to watch them locomote:", 5, 45);
    drawText("Press I so the program runs very fast (If you pressed space, it will crash, thats okay just start up again and dont pree it", 5, 52);
    drawText("Wait for a few minuits (You can press F to exit full screen)", 5, 59);
    drawText("And when you think enough time has passed, press I again to display!", 5, 66);
    drawText("Remember! These are just randomly assembled, and randomly mutated, and selected so they might take time to learn to walk! Also small population size = bad, but fast", 5, 73);

    /* Creature Details */
    int * sizes = specimen[id].genome->iData;
    sprintf(str, "Genes %d, Nodes %d, Muscles %d, Bones %d", sizes[tot] - 1, sizes[nod], sizes[mus], sizes[bon]);
    drawText(str, WINDOW_X / 2, 100);
    glColor3f(BLUE);
    for (int i = 0; i < sizes[nod]; i++) {
        posi loc = specimen[id].nodes[i].loc;
        sprintf(str, "(%+5.2f, %+5.2f, %+5.2f)", loc.x, loc.y, loc.z);
        drawText(str, 10, 100 + 10 * i);
    }
    glColor3f(RED);
    for (int i = 0; i < sizes[mus]; i++) {
        int a = specimen[id].muscles[i].a;
        int b = specimen[id].muscles[i].b;
        sprintf(str, "(%d, %d)", a, b);
        drawText(str, 150, 100 + 10 * i);
    }
    glColor3f(WHITE);
    for (int i = 0; i < sizes[mus]; i++) {
        int a = specimen[id].bones[i].a;
        int b = specimen[id].bones[i].b;
        sprintf(str, "(%d, %d)", a, b);
        drawText(str, 300, 100 + 10 * i);
    }

    return;
}

void draw() {
    if (!(simTime % playBackSpeed)) {
        /* Clear, Reset, Camera */
        glutDrawing();

        /* 3D Drawing */
        reenable3D();
        glLineWidth(3);
        drawGround();
        drawCreature(specimen[id]);

        /* 2D drawing */
        enable2D();
        drawStats();
        drawDisGraph();
        glutSwapBuffers(); // Make it all visible
        sleep_ms(FRAME_SLEEP);
    }


    return;
}

void newCreature(bool error) {
    /* Get Distances */
    posi com = getCom(specimen[id]);
    if (!error) specimen[id].distance = euc2D(com, specimen[id].origin);
    else specimen[id].distance = -0.0;

    /* Go To Next Creature */
    simTime = 0;
    id++;
    return;
}

void newGeneration() {
    /* Duplicate */
    int * toDup = orderDistances(specimen); // Problem
    duplicate(toDup, specimen);
    if (toDup != NULL) free(toDup);

    /* Create New Generation */
    for (int i = 0; i < genSize; i++) {
        specimen[i].distance = 0.0;
        mutateGenome(&specimen[i]);
        createCreature(&specimen[i]);
    }

    /* Go To Next Generation */
    id = 0;
    gen++;
    return;
}







